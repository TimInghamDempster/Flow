@using FlowCompiler;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime;

<div contenteditable="true" id="testDiv" tabindex="0" onblur="@TypingHappened">
    @foreach (var line in CodeLines)
    {
        @foreach (var linePart in line.Parts.OfType<LinePart>())
        {
            <span style="color:@linePart.Colour" title="@linePart.Tooltip">@linePart.Text</span>
        }
        <br/>
    }
</div>

@*
@foreach (var line in CodeLines)
{

    <div tabindex="1" onkeypress="@TypingHappened" onkeydown="@SpecialKey" onclick="@(() => LineClick(line.Index))">

        @foreach (var linePart in line.Parts)
        {
            @(linePart switch
            {
                LinePart lp => (@<span style="color:@lp.Colour" title="@lp.Tooltip">@lp.Text</span>),
                Caret => (@<span style="opacity:@CursorOpacity">|</span>),
                _ => (@<span />)
            })
        }
    </div>
}*@

@code {
    [Parameter]
    public CodeBlock? Block { get; set; }
    [Parameter]
    public EventCallback<CodeChanged> BlockChanged { get; set; }

    public record CodeChanged(string NewCode)
    {
        public CodeBlock? NewBlock { get; set; }
    }

    private record LinePart(string Text, string Colour = "black", string Tooltip = "");
    private record EditorLine(IEnumerable<LinePart> Parts, int Index);

    private string Code =>
        CodeLines.Select(l => l.Parts.Select(p =>
           $"<span style=\"color:{p.Colour}\" title= \"{p.Tooltip}\" >{p.Text} </ span >").
           Aggregate((a, b) => a + b)).
        Aggregate((a, b) => a + "<br/>" + b);

    private IEnumerable<EditorLine> CodeLines =>
        Block?.Lines.Select((l, i) =>
         new EditorLine(
            l.ParsedLine.Tokens.Select<Token, LinePart>(t =>
                (t, l.ParsedLine) switch
                {
                    (Keyword, BlockStartLine) => new LinePart(t.Value + " ", "green"),
                    (Keyword, _) => new LinePart(t.Value + " ", "cornflowerblue"),
                    (Name, _) => new LinePart(t.Value + " ", "gold"),
                    (ErrorToken e, _) => new LinePart(
                        e.Value.Any() ? e.Value + " " : "_ ",
                        "red",
                        e.Error),
                    _ => new LinePart(t.Value)
                }), i)) ?? Enumerable.Empty<EditorLine>();

    private async void TypingHappened(FocusEventArgs e)
    {
        var code = await JSRuntime.InvokeAsync<string>("getCode", "testDiv");
        if (Block is null) return;

        var changed = new CodeChanged(code);

        await BlockChanged.InvokeAsync(changed);

        if (changed.NewBlock is not null)
        {
            Block = changed.NewBlock;
            var codeText = Code;
            await JSRuntime.InvokeVoidAsync("setCode", "testDiv", Code);
        }

        //StateHasChanged();
    }
}