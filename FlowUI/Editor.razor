@using FlowCompiler

<input type="text" value="@CodeLine" placeholder="Enter code here" oninput="@this.LineChanged"/>
<button onclick="@this.RunProgram">Run</button>
<br/>
<div>Result: @EvaluatedResult</div>
<br/>
<div>@Error</div>

@code {
    private ParsedLine? _line;

    [Inject]
    private ICompiler? Compiler{ get; set; }
    [Inject] 
    private IDebugger? Debugger{ get; set; }

    [Parameter] 
    public string CodeLine { get; set; } = "";

    [Parameter] 
    public string EvaluatedResult { get; set; } = "Not run yet";

    public string Error => string.Join("\n", _line?.Tokens.OfType<ErrorToken>().Select(e => e.Error) ?? Enumerable.Empty<string>());

    [Parameter] 
    public EventCallback ValueChanged {get;set;}

    private void LineChanged(ChangeEventArgs e)
    {
        _line = Compiler?.CompileLine(e.Value?.ToString() ?? "");

        if (_line is GoodLine goodLine)
        {
            CodeLine = goodLine.ToString();
            ValueChanged.InvokeAsync();
        }
    }

    private void RunProgram()
    {
        // Can't actually happen, but injection and nullable
        // references don't play nicely
        if (_line is null) return;

        var dllPath = @"Content\test.dll";
        Compiler?.BuildDll(dllPath, _line);
        EvaluatedResult = Debugger?.LaunchApplication(dllPath).ToString() ?? "Error";

        ValueChanged.InvokeAsync();
    }
}
