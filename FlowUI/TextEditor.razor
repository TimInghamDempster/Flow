@using FlowCompiler
@using static FlowUI.BlockEditor;

@foreach(var block in _test.CodeBlocks)
{
    <BlockEditor Block="@block" BlockChanged="@OnBlockChanged"/>
}

<br />
<button onclick="@this.RunProgram">Run</button>
<button onclick="@this.SaveProgram">Save</button>
<br />

<div>Result: @EvaluatedResult</div>
<br />

@code {
    private Test _test = new Test("Uninitialized", new List<Message>(), new List<Step>(), new List<Message>());

    [Inject]
    private ICompiler? Compiler { get; set; }
    [Inject]
    private IDebugger? Debugger { get; set; }

    [Parameter]
    public string EvaluatedResult { get; set; } = "Not run yet";

    protected override void OnInitialized()
    {
        _test = Compiler?.DefaultProgram() ?? _test;
    }

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private Task OnBlockChanged(IChangeData change)
    {
        if (Compiler is null) return Task.CompletedTask;

        _test = change switch
        {
            LineAddedData added => Compiler.ProgramChanged(
                new LineAdded(_test, added)),
            LineChangedData changed => Compiler.ProgramChanged(
                new LineChanged(_test, changed)),
            LineRemovedData removed => Compiler.ProgramChanged(
                new LineRemoved(_test, removed)),
            _ => _test
        };

        return Task.CompletedTask;
    }

    private void SaveProgram()
    {
        var path = $@"Content\{_test.Name}.flow";

        if (Compiler is null) return;

        Compiler.SaveProgram(_test, path);
    }

    private void RunProgram()
    {
        var dllPath = @"Content\test.dll";

        if(Compiler is null || Debugger is null || _test is not Test test) return;

        var IL = test.Code.
        SelectMany(c => c.Lines).
        Select(l => l.ParsedLine).
        OfType<EmitLine>().
        Select(l => l.IL);

        Compiler.BuildDll(dllPath, IL);
        EvaluatedResult = Debugger.LaunchApplication(dllPath).ToString() ?? "Error";

        ValueChanged.InvokeAsync();
    }
}
